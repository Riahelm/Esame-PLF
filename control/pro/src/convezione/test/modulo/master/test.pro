
main :-
    nl,
    write('------------------------------------TESTING-----------------------------------'), nl,
    write('Programma di testing dei predicati per la sezione di Programmazione Logica.   '), nl,
    write('ATTENZIONE: i test "fallimentari" sono stati commentati per non interrompere  '), nl,
    write('la esecuzione del programma.                                                  '), nl,
    nl,
    write('>>TEST 01: verifica del predicato per il calcolo di una lista di punti equidi-'), nl, 
    write('-stanti:                                                                      '), nl,
    write('gen_punti_equi( N, INF, SUP, LN).                                             '), nl,
   %write('gen_punti_equi(-1,   0,  10, L0). '), gen_punti_equi(-1,0,10,L0),                 nl,
   %                                                                              write(L0), nl,
   %write('gen_punti_equi( 0,   0,  10, L1). '), gen_punti_equi(0,0,10,L1),                  nl,				     
   %                                                                              write(L1), nl,
    write('gen_punti_equi( 1,   0,  10, L2). '), gen_punti_equi(1,0,10,L2),                  nl,
                                                                                  write(L2), nl,
    write('gen_punti_equi(10,   1,  10, L3). '), gen_punti_equi(10,1,10,L3),                 nl,
                                                                                  write(L3), nl, 
    nl,
    write('SUP is 2.0, gen_punti_equi(41,  0.0,  SUP, L4).                               '), 
           SUP is 2.0, gen_punti_equi(41,  0.0,  SUP, L4),                                   nl,
                                                                                  write(L4), nl, 
    nl,
    write('>>TEST 02: verifica del predicato per il calcolo della condizione iniziale:   '), nl,
    write('NX is 41, INF is 0.0, SUP is 2.0, cond_iniziale(NX, INF, SUP, L).             '), nl, 
           NX is 41, INF is 0.0, SUP is 2.0, cond_iniziale(NX, INF, SUP, M),       write(M), nl,

    nl,
    write('>>TEST 03: verifica dei predicati ausiliari per le operazioni sulle liste:    '), nl,
    write('inserisci_elem(1, [2,3,4], N).     -- inserisce elem in testa alla lista      '), nl,
           inserisci_elem(1, [2,3,4], N),                                          write(N), nl,                       
    write('testa([1,2,3,4], R).               -- estrae la testa della lista             '), nl,
           testa([1,2,3,4], R),                                                    write(R), nl, 
    nl,
    write('>>TEST 04: verifica dei predicati per la implementazione del metodo di Eulero:'), nl,
    write('C is 1.0, DX is SUP / (NX - 1), DT is 0.02, passo_eulero(1,2,C,DX,DT,EU).     '), nl,
           C is 1.0, DX is SUP / (NX - 1), DT is 0.02, passo_eulero(1,2,C,DX,DT,EU),
                                                                                  write(EU), nl,
    nl,
    write('>>TEST 05: verifica dei predicati per la integrazione numerica spaziale e tem-'), nl,
    write('-porale                                                                       '), nl,
    write('I is 0, NX1 is NX - 1, DX is SUP / (NX1), DT is 0.02.                         '), nl,
    write('conv_spazio(I,NX1,C,DX,DT,M,F), conta(F,0,K). K=41                            '), nl,
           I is 0, NX1 is NX - 1,
           conv_spazio(I,NX1,C,DX,DT,M,F), conta(F,0,K),   write(F), write('K='), write(K),  nl,
    write('K1 is 0, NT is 25, NX1 is NX - 1, DX is SUP / (NX1), DT is 0.02.              '), nl,
    write('conv_tempo(K1,NT,NX1,C,DX,DT,M,G), conta(G,0,Z). Z=41                         '), nl,
           K1 is 0, NT is 25,
           conv_tempo(K1,NT,NX1,C,DX,DT,M,G), conta(G,0,Z), write(G), write('Z='), write(Z), nl,
    nl,
    write('>>TEST 05: verifica del predicato MAIN.                                       '), nl,
    write('NX is 25, DT is 0.02, calc_convezione(NX,DT,ONDA), conta(ONDA,0,W). W=41      '), nl, 
                                 calc_convezione(NX,DT,ONDA), conta(ONDA,0,W),  write(ONDA), 
                                                                      write('W='), write(W), nl.

