
main :-
    nl,
    write('------------------------------------TESTING-----------------------------------'), nl,
    write('Programma di testing dei predicati per la sezione di Programmazione Logica.   '), nl,
    write('ATTENZIONE: i test "fallimentari" sono stati commentati per non interrompere  '), nl,
    write('la esecuzione del programma.                                                  '), nl,
    nl,
    write('>>TEST 01: verifica del predicato per il calcolo di una lista di punti equidi-'), nl, 
    write('-stanti:                                                                      '), nl,
    write('gen_punti_equi( N, INF, SUP, LN).                                             '), nl,
   %write('gen_punti_equi(-1,   0,  10, L0). '), gen_punti_equi(-1,0,10,L0),                 nl,
   %                                                                              write(L0), nl,
   %write('gen_punti_equi( 0,   0,  10, L1). '), gen_punti_equi(0,0,10,L1),                  nl,				     
   %                                                                              write(L1), nl,
    write('gen_punti_equi( 1,   0,  10, L2). '), gen_punti_equi(1,0,10,L2),                  nl,
                                                                                  write(L2), nl,
    write('gen_punti_equi(10,   1,  10, L3). '), gen_punti_equi(10,1,10,L3),                 nl,
                                                                                  write(L3), nl, 
    nl,
    write('SUP is 2.0 * pi, gen_punti_equi(201,  0.0,  2.0, L4). '), 
           SUP is 2.0 * pi, gen_punti_equi(201,  0.0,  SUP, L4),                             nl,
                                                                                  write(L4), nl, 
    nl,
    write('>>TEST 02: verifica del predicato per il calcolo della condizione iniziale:   '), nl,
    write('NX is 201, INF is 0.0, SUP is 2.0 * pi, cond_iniziale_burg(NX, INF, SUP, L).  '), nl, 
           NX is 201, INF is 0.0, SUP is 2.0 * pi, cond_iniziale_burg(NX, INF, SUP, M), 
                                                                                   write(M), nl,

    nl,
    write('>>TEST 03: verifica dei predicati ausiliari per le operazioni sulle liste:    '), nl,
    write('inserisci_elem(1, [2,3,4], N).     -- inserisce elem in testa alla lista      '), nl,
           inserisci_elem(1, [2,3,4], N),                                          write(N), nl,                       
    write('nth(3, [0,2,4,5], O),              -- estrae n-esimo elem dalla lista         '), nl,
           nth(3, [0,2,4,5], O),                                                   write(O), nl, 
    write('last([1,2,3,4], P).                -- restituisce la coda della lista         '), nl, 
           last([1,2,3,4], P),                                                     write(P), nl, 
    write('reverse([1,2,3,4], LInv).          -- inverte ordine elem di una lista        '), nl,   
           reverse([1,2,3,4], LInv),                                            write(LInv), nl,  
    write('estrai_lista([1,2,3,4], Q).        -- estrae lista succva al primo elem       '), nl,
           estrai_lista([1,2,3,4], Q),                                             write(Q), nl,   
    write('testa([1,2,3,4], R).               -- estrae la testa della lista             '), nl,
           testa([1,2,3,4], R),                                                    write(R), nl, 
    write('penultimo([1,2,3,4], S).           -- estrae penultimo elem dalla lista       '), nl,
           penultimo([1,2,3,4], S),                                                write(S), nl,
    nl,
    write('>>TEST 04: verifica dei predicati per la implementazione del metodo di Eulero:'), nl,
    write('NU is 0.07, DX is 0.0314, DT is 0.0014, bordo_inf(M,NU,DX,DT,BI).             '), nl,
           NU is 0.07, DX is 0.0314, DT is 0.0014, bordo_inf(M,NU,DX,DT,BI),      write(BI), nl,             
    write('NU is 0.07, DX is 0.0314, DT is 0.0014, bordo_sup(M,NU,DX,DT,BS).             '), nl,
           NU is 0.07, DX is 0.0314, DT is 0.0014, bordo_sup(M,NU,DX,DT,BS),      write(BS), nl, 
   %write('I is 0, NU is 0.07, DX is 0.0314, DT is 0.0014, passo_eulero(M,I,NU,DX,DT,EU) '), nl,
   %       I is 0, NU is 0.07, DX is 0.0314, DT is 0.0014, passo_eulero(M,I,NU,DX,DT,EU),
   %                                                                              write(EU), nl,
    write('I is 1, NU is 0.07, DX is 0.0314, DT is 0.0014,                               '), nl,
    write('passo_eulero_burg(M,I,NU,DX,DT,EU)                                            '), nl,
           I is 1, NU is 0.07, DX is 0.0314, DT is 0.0014, 
           passo_eulero_burg(M,I,NU,DX,DT,EU),                                    write(EU), nl,
    nl,
    write('>>TEST 05: verifica dei predicati per la integrazione numerica spaziale e tem-'), nl,
    write('-porale                                                                       '), nl,
    write('I is 1, NX1 is 201 - 1, NU is 0.07, DX is 0.0314, DT is 0.0014,               '), nl,
    write('spazio_burg(I,NX1,NU,DX,DT,M,F), conta(F,0,K). K=200                          '), nl,
           I is 1, NX1 is 201 - 1, NU is 0.07, DX is 0.0314, DT is 0.0014,
           spazio_burg(I,NX1,NU,DX,DT,M,F), conta(F,0,K),                  write(F), write('K='), 
                                                                                    write(K), nl,
    write('K1 is 0, NT is 425, NX1 is 201 - 1, NU is 0.07, DX is 0.0314, DT is 0.0014,    '), nl,
    write('tempo_burg(K1,NT,NX1,NU,DX,DT,M,G), conta(G,0,Z). Z=201                        '), nl,
           K1 is 0, NT is 425, NX1 is 201 - 1, NU is 0.07, DX is 0.0314, DT is 0.0014,
           tempo_burg(K1,NT,NX1,NU,DX,DT,M,G), conta(G,0,Z), write(G), write('Z='), 
                                                                                    write(Z), nl,
    nl,
    write('>>TEST 05: verifica del predicato MAIN.                                        '), nl,
    write('NX is 201, calc_burgers(NX,ONDA), conta(ONDA,0,W). W=201                       '), nl, 
           NX is 201, calc_burgers(NX,ONDA), conta(ONDA,0,W),                    write(ONDA), 
                                                                       write('W='), write(W), nl.

